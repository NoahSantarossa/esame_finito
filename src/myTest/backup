package myTest;

import myAdapter.*;
import org.junit.*;
import org.junit.Before;
import org.junit.Test;

//import java.util.NoSuchElementException;
import java.util.NoSuchElementException;

import static org.junit.Assert.*;
import static org.junit.Assert.assertArrayEquals;


public class TestList
{
	HList l1 = null, l2 = null;
	HListIterator li = null;
	static String[] args = {"pippo", "qui", "pluto", "paperino", "qui", "ciccio"};

	@Before
	public void setup()
	{
		System.out.println("Instantiate an empty List");
		l1 = new ListAdapter();
	}

	@After
	public void cleanup()
	{
		System.out.println("Purge all remaining elements");
		l1.clear();
	}

	@Test
	public void testBacking()
	{
		for(int i=0;i<argv.length;i++)
		{
			l1.add(argv[i]);
		}
		System.out.println("List.toString() ? " + l1);

		//try
		//{
			int dl0, dl1, dli, dsl0, dsl1, dsli;

			iterate(l1.iterator());
			System.out.println(l1 + " " + l1.size());
			dl0 = l1.size();

			l2 = l1.subList(0, argv.length/2);
			dsl0 = l2.size();

			//try
			//{
				l2.add("pipperissimo");
				dli = l1.size();
				dsli = l2.size();

				assertEqual("\n*** sublist add is NOT backed correctly ***\n", dli, dl0+1);
				assertEqual("\n*** sublist add is NOT backed correctly ***\n", dsli, dsl0+1);

			//}
			//catch(Exception e)
			//{
				//e.printStackTrace();
				//System.out.println("\n*** sublist add is NOT backed correctly ***\n");
			//}

			//try
			//{
				l2.remove("pipperissimo");
				assertEqual("\n*** list remove is NOT backed correctly ***\n", l1.size(), dl0);
				assertEqual("\n*** list remove is NOT backed correctly ***\n", l2.size(), dsl0);


				//if((l1.size() == dl0) && (l2.size() == dsl0))
				//{
					//System.out.println("\n*** list remove is backed correctly ***\n");
				//}
				//else
				//{
					//System.out.println("\n*** list remove is NOT backed correctly ***\n");
				//}

			//}
			//catch(Exception e)
			//{
				//e.printStackTrace();
				//System.out.println("\n*** sublist remove is NOT backed correctly ***\n");
			//}

			iterate(l2.iterator());
			System.out.println(l2 + " " + l2.size());

			l2.clear();
			dl1 = l1.size();
			dsl1 = l2.size();
			System.out.println(l1 + " " + l1.size());
			iterate(l1.iterator());
			System.out.println(l2 + " " + l2.size());
			iterate(l2.iterator());

			System.out.println(dl0 + " " + dl1 + " " + dsl0 + " " + dsl1);
			assertEquals("\n*** sublist is NOT backed correctly ***\n", dsl0, (dl0/2));
			assertEquals("\n*** sublist is NOT backed correctly ***\n", dsl1, 0);
			assertEquals("\n*** sublist is NOT backed correctly ***\n", dl1, (dl0 - dsl0));

		//}
		//catch(Exception e)
		//{
			//e.printStackTrace();
		//}
	
	}

	/*

		try
		{
			System.out.println("TestListIterator #1");
			iterate(l1.iterator());
			li = l1.listIterator(l1.size());
			while(li.hasPrevious())
			{
				System.out.print(li.previous() + " ");
				iterate(l1.iterator());
				li.remove();
			}
			iterate(l1.iterator());
			if(l1.size() == 0)
			{
				System.out.println("\n*** listiterator from end works and backward removal works ***\n");
			}
			else
			{
				System.out.println("\n*** listiterator from end not working ***\n");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println("\n*** listiterator from end not working ***\n");
		}

		try
		{
			int dl0, dl1, dl2;
			System.out.println("TestListIterator #2");
			dl0 = l1.size();
			for(int i=0;i<argv.length;i++)
			{
				l1.add(argv[i]);
			}
			dl1 = l1.size();
			iterate(l1.iterator());
			li = l1.listIterator();
			while(li.hasNext())
			{
				System.out.print(li.next() + " ");
				iterate(l1.iterator());
				li.remove();
			}
			dl2 = l1.size();
			iterate(l1.iterator());

			if(dl1 == (dl0+argv.length) && dl2 == 0)
			{
				System.out.println("\n*** insertion and forward removal works ***\n");
			}
			else
			{
				System.out.println("\n*** insertion and forward removal not working ***\n");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}


		try
		{
			int dl0, dl1, dl2;

			System.out.println("TestListIterator #3");
			dl0 = l1.size();
			for(int i=0;i<argv.length;i++)
			{
				l1.add(argv[i]);
			}
			dl1 = l1.size();
			iterate(l1.iterator());
			li = l1.listIterator();
			while(li.hasNext())
				li.next();
			while(li.hasPrevious())
			{
				System.out.print(li.previous() + " ");
				iterate(l1.iterator());
				li.remove();
			}
			dl2 = l1.size();
			iterate(l1.iterator());
			if(dl1 == (dl0+argv.length) && dl2 == 0)
			{
				System.out.println("\n*** insertion and forward to end and backward removal works ***\n");
			}
			else
			{
				System.out.println("\n*** insertion and forward to end and backward removal not working ***\n");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

		try
		{
			System.out.println("TestRecursive SubListing");
			System.out.println(l1.size());
			for(int i=0;i<argv.length;i++)
			{
				l1.add(argv[i]);
			}
			System.out.println(l1.size());
			for(int i=0;i<argv.length;i++)
			{
				l1.add(argv[i]);
			}
			System.out.println(l1.size());
			for(int i=0;i<argv.length;i++)
			{
				l1.add(argv[i]);
			}
			System.out.println(l1.size());
			iterate(l1.iterator());

			while(l1.size()>=2)
			{
				l1 = l1.subList(1,l1.size()-1);
				System.out.println(l1.size());
				iterate(l1.iterator());
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	//aggiorna interfaccia Iterator
	public static void iterate(HIterator iter)
	{
		System.out.print("{");
		while(iter.hasNext())
		{
			System.out.print(iter.next() + "; ");
		}
		System.out.println("}");
	}
*/
}
